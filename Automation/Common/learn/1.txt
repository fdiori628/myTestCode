1. 切片操作序列
    1. append:
        a = [1,2,3,4,5]
        a[5:5] = [6]
    2. insert:
        a = [1,2,3,4,5]
        a[2:2] = [6]
    3. delete:
        a = [1,2,3,4,5]
        a[3:4] = []
    4. resvers:
        a = [1,2,3,4,5]
        print(a[::-1])

2. touple

t = 1,2,

a, b = t

a, b = b, a-

t = 1,2,3,4,5

a, *b, c = t

3. dict get value   dict.get(xx)
pop delete and get the value with tuple （key, value)

4. 函数作为函数返回值返回，叫闭包
def fn():
    a = 10
    def inner():
        print('this is a', a)

    return inner

r = fn()   fn()将返回函数inner, r()等于调用函数inner

5.函数装饰器
    OCP  开放扩展，关闭修改
    #定义装饰函数，实际就是返回一个扩展功能后的新函数
    def myfun(fn):
    def new_func(*args, **kwargs):
        print('start loading')
        fn(*args, **kwargs)
        print('end loading')
    return new_func

    #将函数sayHello 作为参数传入myfun()里
    @myfun
    def sayHello(name):
        print('hello, %s' % name)


    sayHello('karl')

6.对象
    对象-》
    1. ID, 2.Type, 3.Value

7.class
    通过类创建对象，对象就是类的instance, 创建对象就是class实例化
    int(), float(), dict(), list(), 都是类
    python里class 命名用大驼峰（js里小驼峰）
    a = int(10)       #10 是一个class
    b = str('hello')
    通过类创建对象
        1. 创建变量
        2. 内存中创建新对象
        3. init
        3. 将对象的id赋值给变量

    class Person:
    def __init__(self):
        self.name = 'Karl'

    def sayhello(self):
        print('hello, %s' % self.name)

    init 初始化类属性

    class Person:
    def __init__(self, *args):
        self.name, self.age = args

    def sayhello(self):
        print('hello, %s, the age is %s' % (self.name, self.age))


    p1 = Person("karl", 20)
    p1.sayhello()




8. 对象之封装
    避免使用者随意修改属性值
    提供getter setter方法来修改
class Dog:

    def __init__(self, *args):
        self._name, self._age, self.gender, self.height = args

    def jiao(self):
        print('%s is jiaoing' % self._name)

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def set_age(self, age):
        if isinstance(age, int) is True:
            self._age = age
        else:
            return print('Age is not int')

9. 私有属性操作：
    _name  一个下划线代表私有属性
    __name   双__ 只是python改了属性名，没有意义

10. property 装饰器
class Person:
    def __init__(self, *args):
        self._name, = args

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name


11.继承
class Animal:

    def __init__(self, name):
        self._name = name
        pass

    def run(self):
        print('%s is running' % self._name)

    def sleep(self):
        print('sleeping')


class Dog(Animal):

    def dark(self):
        print('Dog in dok')

12. 多重继承
class A:
    def testA(self):
        print('this is Atest')


class B:
    def testB(self):
        print('this is Btest')


# 多重继承
class C(B, A):
    pass


13.多态
 - 保证程序灵活

14.类属性和实例属性
    class A:
    name = 'Karl'

    a = A()
    a.name = 'Tom'
    print(a.name)#Tom
    print(A.name)#Karl

15.类方法，实例方法，静态方法
    类方法能直接被类调用cls
    实例方法被类调用需要传递self（手动)
    静态方法随意调用

16.垃圾回收
    没有被引用的对象就是垃圾（万物皆对象）
    class A:
        def __init__(self):
            self.name = 'Karl'


    a = A()

    # 此时A不是垃圾，因该有引用
    print(a.name)
    # 此时A是垃圾，因为没有变量对A进行引用
    a = None

17.特殊方法
    __new__   ----创建对象时调用  cls作为参数默认传递
    __init__  ----创建对象后调用  self作为参数默认传递
    __del__   ----删除对象前调用
    __str__   ----对象转化成字符串时候调用，比如 print(object). 相当于str(object)
    __repr__  ----repr(object)

18.module
    _C     加_的变量只能在模块内部访问，无法通过from xx import * 来引入
    __name__ 获取模块name
    package ---- 功能强大的模块集合 __init__ 初始化package, package可以 直接当module用
    标准库
    sys: 提供了一些变量和函数，可以获取到py解析器的信息或者操作py解析器
        -sys.argv  获取执行代码时候命令行中的参数    list
        -sys.modules 获取当前程序加载得所有module   dict
        -pprint  格式化print
        -sys.path   package/  module 路径
        -sys.platform   当前运行得系统环境
    os: 操作系统模块
        -os.system() 执行一个命令，比如打开记事本 os.system(notepad)
19.异常
    try:
        可能出现错误得语句
    except:
        出现错误后如何
    else:
        没出错怎么做

    try:
        print(a)
    except Exception as e:
        print(type(e), e)
    else:
        print('eles')
    finally:
        print('finally')

20.文件
    with ..  as
    with open('./test.txt', encoding='UTF-8') as testfile:
        print(testfile.read())
    read() 可以接受一个size作为参数，次参数可以指定数量。 默认值为-1时，会读取文件里所有的. read(20)会读取前20个字符
    r, w, a, x (new create)
    rt --- 文本 默认是t，所以r = rt
    rb --- 2进制